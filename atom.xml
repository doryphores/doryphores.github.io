<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[1 Pixel Out]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://1pixelout.net/"/>
  <updated>2015-09-14T20:38:09.000Z</updated>
  <id>http://1pixelout.net/</id>
  
  <author>
    <name><![CDATA[Martin Laine]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Prevent copying empty selections in Atom]]></title>
    <link href="http://1pixelout.net/2015/09/14/prevent-copying-empty-selection-in-atom/"/>
    <id>http://1pixelout.net/2015/09/14/prevent-copying-empty-selection-in-atom/</id>
    <published>2015-09-14T20:29:06.000Z</published>
    <updated>2015-09-14T20:38:09.000Z</updated>
    <content type="html"><![CDATA[<p>I really can’t do with an editor that clears my clipboard when I accidently copy an empty line. This is an easy mistake to make:</p>
<ul>
<li>cut something with <code>Cmd+X</code></li>
<li>move the cursor to an empty line where I want to paste</li>
<li>accidently hit <code>Cmd+C</code> instead of <code>Cmd+V</code></li>
<li>Boom! I have now lost my clipboard contents</li>
</ul>
<p>Sublime Text had an option to disable copying empty selections but Atom doesn’t. Fortunately, it’s super easy to hack Atom and someone has figured out how to prevent this. I’m pasting it here so I can easily find it.</p>
<p>This is <a href="https://discuss.atom.io/t/resolved-avoid-copying-when-selection-is-empty/16397/4" target="_blank" rel="external">the original post</a> on the Atom forum and here’s the snippet to paste in your Atom init script.</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># prevent core:copy if and only if there's one selection in</span></span><br><span class="line"><span class="comment"># the active editor (mini or not) and its length equals 0</span></span><br><span class="line">atom.commands.add <span class="string">'atom-text-editor'</span>, <span class="string">'core:copy'</span>, <span class="function"><span class="params">(e)</span> -&gt;</span></span><br><span class="line">  editor = e.currentTarget.getModel()</span><br><span class="line"></span><br><span class="line">  <span class="comment"># do nothing if there's more than 1 selection</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">if</span> editor.getSelectedBufferRanges().length &gt; <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># get the starting and ending points of the selection</span></span><br><span class="line">  &#123;start, end&#125; = editor.getSelectedBufferRange()</span><br><span class="line"></span><br><span class="line">  <span class="comment"># stop the command from immediate propagation (i.e.</span></span><br><span class="line">  <span class="comment"># executing the same command on the same element or</span></span><br><span class="line">  <span class="comment"># an element higher up the DOM tree). This works</span></span><br><span class="line">  <span class="comment"># because atom executes commands in the reverse order</span></span><br><span class="line">  <span class="comment"># they were registered with atom.commands.add, and this</span></span><br><span class="line">  <span class="comment"># one's added after the core commands are already</span></span><br><span class="line">  <span class="comment"># registered.</span></span><br><span class="line">  <span class="keyword">if</span> start.column <span class="keyword">is</span> end.column <span class="keyword">and</span> start.row <span class="keyword">is</span> end.row</span><br><span class="line">    e.stopImmediatePropagation()</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>I really can’t do with an editor that clears my clipboard when I accidently copy an empty line. This is an easy mistake to make:</p>
<ul>]]>
    </summary>
    
      <category term="atom" scheme="http://1pixelout.net/tags/atom/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://1pixelout.net/2015/09/14/hello-world/"/>
    <id>http://1pixelout.net/2015/09/14/hello-world/</id>
    <published>2015-09-14T19:39:08.000Z</published>
    <updated>2015-09-14T19:39:08.000Z</updated>
    <content type="html"><![CDATA[<h1 id="An_exhibit_of_Markdown">An exhibit of Markdown</h1><p>This note demonstrates some of what <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="external">Markdown</a> is capable of doing.</p>
<p><em>Note: Feel free to play with this page. Unlike regular notes, this doesn’t automatically save itself.</em></p>
<h2 id="Basic_formatting">Basic formatting</h2><p>Paragraphs can be written like so. A paragraph is the basic block of Markdown. A paragraph is what text will turn into when there is no reason it should become anything else.</p>
<p>Paragraphs must be separated by a blank line. Basic formatting of <em>italics</em> and <strong>bold</strong> is supported. This <em>can be <strong>nested</strong> like</em> so.</p>
<h2 id="Lists">Lists</h2><h3 id="Ordered_list">Ordered list</h3><ol>
<li>Item 1</li>
<li>A second item</li>
<li>Number 3</li>
</ol>
<h3 id="Unordered_list">Unordered list</h3><ul>
<li>An item</li>
<li>Another item</li>
<li>Yet another item</li>
<li>And there’s more…</li>
</ul>
<h2 id="Paragraph_modifiers">Paragraph modifiers</h2><h3 id="Simple_code_block">Simple code block</h3><pre><code>$ npm <span class="operator"><span class="keyword">install</span> <span class="keyword">package</span></span>
</code></pre><h3 id="Fenced_code_block_with_syntax_highlighting">Fenced code block with syntax highlighting</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">initWindow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> win = remote.getCurrentWindow()</span><br><span class="line">  <span class="keyword">const</span> dims = LocalStorageManager.get(<span class="string">"windowDimensions"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> saveDims = _.debounce(() =&gt; &#123;</span><br><span class="line">    LocalStorageManager.set(<span class="string">"windowDimensions"</span>, &#123;</span><br><span class="line">      bounds    : win.getBounds(),</span><br><span class="line">      maximized : win.isMaximized()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">  [<span class="string">"move"</span>, <span class="string">"resize"</span>].forEach((event) =&gt; &#123;</span><br><span class="line">    win.removeAllListeners(event)</span><br><span class="line">    win.on(event, saveDims)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (dims) &#123;</span><br><span class="line">    win.setBounds(dims.bounds)</span><br><span class="line">    win.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Maximizing on OSX is a bit odd</span></span><br><span class="line">    <span class="keyword">if</span> (process.platform != <span class="string">"darwin"</span> &amp;&amp; dims.maximized) &#123;</span><br><span class="line">      win.maximize()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    win.show()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>You can also make <code>inline code</code> to add code into other things.</p>
<h3 id="Quote">Quote</h3><blockquote>
<p>Here is a quote. What this is should be self explanatory. Quotes are automatically indented when they are used.</p>
</blockquote>
<h2 id="Headings">Headings</h2><p>There are six levels of headings. They correspond with the six levels of HTML headings. You’ve probably noticed them already in the page. Each level down uses one more hash character.</p>
<h3 id="Headings_can_also_contain_formatting">Headings <em>can</em> also contain <strong>formatting</strong></h3><h3 id="They_can_even_contain_inline_code">They can even contain <code>inline code</code></h3><p>Of course, demonstrating what headings look like messes up the structure of the page.</p>
<p>I don’t recommend using more than three or four levels of headings here, because, when you’re smallest heading isn’t too small, and you’re largest heading isn’t too big, and you want each size up to look noticeably larger and more important, there there are only so many sizes that you can use.</p>
<h2 id="URLs">URLs</h2><p>URLs can be made in a handful of ways:</p>
<ul>
<li>A named link to <a href="http://www.markitdown.net/" target="_blank" rel="external">MarkItDown</a>. The easiest way to do these is to select what you want to make a link and hit <code>Ctrl+L</code>.</li>
<li>Another named link to <a href="http://www.markitdown.net/" target="_blank" rel="external">MarkItDown</a></li>
<li>Sometimes you just want a URL like <a href="http://www.markitdown.net/" target="_blank" rel="external">http://www.markitdown.net/</a>.</li>
</ul>
<h2 id="Horizontal_rule">Horizontal rule</h2><p>A horizontal rule is a line that goes across the middle of the page.</p>
<hr>
<p>It’s sometimes handy for breaking things up.</p>
<h2 id="Images">Images</h2><p>Markdown can also contain images. I’ll need to add something here sometime.</p>
<h2 id="Finally">Finally</h2><p>There’s actually a lot more to Markdown than this. See the official <a href="http://daringfireball.net/projects/markdown/basics" target="_blank" rel="external">introduction</a> and <a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="external">syntax</a> for more information. However, be aware that this is not using the official implementation, and this might work subtly differently in some of the little things.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="An_exhibit_of_Markdown">An exhibit of Markdown</h1><p>This note demonstrates some of what <a href="http://daringfireball.net/project]]>
    </summary>
    
  </entry>
  
</feed>
